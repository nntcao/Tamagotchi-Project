using namespace std;

#include "Pet.h"
#include "GameManager.h"
#include <random>
#include <string>
#include <algorithm>
#include <iostream>
#include <vector>

const vector<string> Pet::possibleTraits = {
		"Accusative",
		"Active",
		"Adventurous",
		"Affable",
		"Aggressive",
		"Agreeable",
		"Aimless",
		"Aloof",
		"Altruistic",
		"Analytical",
		"Angry",
		"Animated",
		"Annoying",
		"Anxious",
		"Apathetic",
		"Apologetic",
		"Apprehensive",
		"Argumentative",
		"Arrogant",
		"Articulate",
		"Attentive",
		"Bigoted",
		"Bitter",
		"Blustering",
		"Boastful",
		"Bookish",
		"Bossy",
		"Braggart",
		"Brash",
		"Brave",
		"Bullying",
		"Callous",
		"Calm",
		"Candid",
		"Cantankerous",
		"Capricious",
		"Careful",
		"Careless",
		"Caring",
		"Casual",
		"Catty",
		"Cautious",
		"Cavalier",
		"Charming",
		"Chaste",
		"Chauvinistic",
		"Cheeky",
		"Cheerful",
		"Childish",
		"Chivalrous",
		"Clueless",
		"Clumsy",
		"Cocky",
		"Comforting",
		"Communicative",
		"Complacent",
		"Condescending",
		"Confident",
		"Conformist",
		"Confused",
		"Conscientious",
		"Conservative",
		"Contentious",
		"Contrary",
		"Contumely",
		"Conventional",
		"Cooperative",
		"Courageous",
		"Courteous",
		"Cowardly",
		"Coy",
		"Crabby",
		"Cranky",
		"Critical",
		"Cruel",
		"Cultured",
		"Curious",
		"Cynical",
		"Daring",
		"Deceitful",
		"Deceptive",
		"Defensive",
		"Defiant",
		"Deliberate",
		"Deluded",
		"Depraved",
		"Discreet",
		"Dishonest",
		"Disingenuous",
		"Disloyal",
		"Disrespectful",
		"Distant",
		"Distracted",
		"Distraught",
		"Docile",
		"Doleful",
		"Dominating",
		"Dramatic",
		"Drunkard",
		"Dull",
		"Earthy",
		"Eccentric",
		"Elitist",
		"Emotional",
		"Energetic",
		"Enigmatic",
		"Enthusiastic",
		"Epicurean",
		"Excited",
		"Expressive",
		"Extroverted",
		"Faithful",
		"Fanatical",
		"Fastidious",
		"Fatalistic",
		"Fearful",
		"Fearless",
		"Feral",
		"Fierce",
		"Feisty",
		"Flamboyant",
		"Flippant",
		"Flirtatious",
		"Foolhardy",
		"Foppish",
		"Forgiving",
		"Friendly",
		"Frightened",
		"Frivolous",
		"Frustrated",
		"Funny",
		"Furtive",
		"Generous",
		"Genial",
		"Gentle",
		"Gloomy",
		"Goofy",
		"Gossip",
		"Graceful",
		"Gracious",
		"Grave",
		"Gregarious",
		"Grouchy",
		"Groveling",
		"Gruff",
		"Gullible",
		"Happy",
		"Harsh",
		"Hateful",
		"Helpful",
		"Honest",
		"Hopeful",
		"Hostile",
		"Humble",
		"Humorless",
		"Humorous",
		"Idealistic",
		"Idiosyncratic",
		"Imaginative",
		"Imitative",
		"Impatient",
		"Impetuous",
		"Implacable",
		"Impractical",
		"Impulsive",
		"Inattentive",
		"Incoherent",
		"Indifferent",
		"Indiscreet",
		"Individualist",
		"Indolent",
		"Indomitable",
		"Industrious",
		"Inexorable",
		"Inexpressive",
		"Insecure",
		"Insensitive",
		"Instructive",
		"Intolerant",
		"Intransigent",
		"Introverted",
		"Irreligious",
		"Irresponsible",
		"Irreverent",
		"Irritable",
		"Jealous",
		"Jocular",
		"Joking",
		"Jolly",
		"Joyous",
		"Judgmental",
		"Jumpy",
		"Kind",
		"Know-it-all",
		"Languid",
		"Lazy",
		"Lethargic",
		"Lewd",
		"Liar",
		"Likable",
		"Lippy",
		"Listless",
		"Loquacious",
		"Loving",
		"Loyal",
		"Lust",
		"Madcap",
		"Magnanimous",
		"Malicious",
		"Maudlin",
		"Mean",
		"Meddlesome",
		"Melancholy",
		"Melodramatic",
		"Merciless",
		"Merry",
		"Meticulous",
		"Mischievous",
		"Miscreant",
		"Miserly",
		"Modest",
		"Moody",
		"Moralistic",
		"Morbid",
		"Morose",
		"Mournful",
		"Mousy",
		"Mouthy",
		"Mysterious",
		"NaÃ¯ve",
		"Narrow-minded",
		"Needy",
		"Nefarious",
		"Nervous",
		"Nettlesome",
		"Neurotic",
		"Noble",
		"Nonchalant",
		"Nurturing",
		"Obdurate",
		"Obedient",
		"Oblivious",
		"Obnoxious",
		"Obsequious",
		"Obsessive",
		"Obstinate",
		"Obtuse",
		"Odd",
		"Ornery",
		"Optimistic",
		"Organized",
		"Ostentatious",
		"Outgoing",
		"Overbearing",
		"Paranoid",
		"Passionate",
		"Pathological",
		"Patient",
		"Peaceful",
		"Pensive",
		"Pertinacious",
		"Pessimistic",
		"Philanderer",
		"Philosophical",
		"Phony",
		"Pious",
		"Playful",
		"Pleasant",
		"Poised",
		"Polite",
		"Pompous",
		"Pondering",
		"Pontificating",
		"Practical",
		"Prejudiced",
		"Pretentious",
		"Preoccupied",
		"Promiscuous",
		"Proper",
		"Proselytizing",
		"Proud",
		"Prudent",
		"Prudish",
		"Prying",
		"Puerile",
		"Pugnacious",
		"Quiet",
		"Quirky",
		"Racist",
		"Rascal",
		"Rash",
		"Realistic",
		"Rebellious",
		"Reckless",
		"Refined",
		"Repellent",
		"Reserved",
		"Respectful",
		"Responsible",
		"Restless",
		"Reticent",
		"Reverent",
		"Rigid",
		"Risk-taking",
		"Rude",
		"Sadistic",
		"Sarcastic",
		"Sardonic",
		"Sassy",
		"Savage",
		"Scared",
		"Scolding",
		"Secretive",
		"Self-effacing",
		"Selfish",
		"Selfless",
		"Senile",
		"Sensible",
		"Sensitive",
		"Sensual",
		"Sentimental",
		"Serene",
		"Serious",
		"Servile",
		"Sexist",
		"Sexual",
		"Shallow",
		"Shameful",
		"Shameless",
		"Shifty",
		"Shrewd",
		"Shy",
		"Sincere",
		"Slanderous",
		"Sly",
		"Smug",
		"Snobbish",
		"Sober",
		"Sociable",
		"Solemn",
		"Solicitous",
		"Solitary",
		"Sophisticated",
		"Spendthrift",
		"Spiteful",
		"Stern",
		"Stingy",
		"Stoic",
		"Stubborn",
		"Submissive",
		"Sultry",
		"Superstitious",
		"Surly",
		"Suspicious",
		"Sybarite",
		"Sycophantic",
		"Sympathetic",
		"Taciturn",
		"Tactful",
		"Tawdry",
		"Teetotaler",
		"Temperamental",
		"Tempestuous",
		"Thorough",
		"Thrifty",
		"Timid",
		"Tolerant",
		"Transparent",
		"Treacherous",
		"Troublemaker",
		"Trusting",
		"Truthful",
		"Uncommitted",
		"Understanding",
		"Unfriendly",
		"Unhinged",
		"Uninhibited",
		"Unpredictable",
		"Unruly",
		"Unsupportive",
		"Vague",
		"Vain",
		"Vapid",
		"Vengeful",
		"Vigilant",
		"Violent",
		"Vivacious",
		"Vulgar",
		"Wanton",
		"Wasteful",
		"Weary",
		"Whimsical",
		"Whiny",
		"Wicked",
		"Wisecracking",
		"Wistful",
		"Witty",
		"Zealous"
	};

Pet::Pet(string _name, string _type) {
    int randomTraitIndex = rand() % Pet::possibleTraits.size();
    trait = Pet::possibleTraits.at(randomTraitIndex);

    hunger = rand() % 51;
    sleepiness = rand() % 51;
    boredom = rand() % 51;
    sadness = rand() % 51;
    name = _name;
    type = _type;
    hoursAged = 0;
}

string Pet::getSummary() {
    return "Name: " + name + "; Type: " + type + "; Trait: " + trait + "; Age: " + to_string(hoursAged) + " hours; Hunger: " + to_string(hunger) + "/100; Sleep: " + to_string(sleepiness) + "/100; Boredom: " + to_string(boredom) + "/100; Sadness: " + to_string(sadness) + "/100;";
}

string Pet::getSaveString() {
    return name + " " + to_string(hoursAged) + " " + trait + " " + to_string(hunger) + " " + to_string(sleepiness) + " " + to_string(boredom) + " " + to_string(sadness) + " " + type;
}

void Pet::changeStat(int deltaHunger, int deltaSleep, int deltaBoredom, int deltaSadness) {
    hunger = max(0, min(hunger + deltaHunger, 100));
    sleepiness = max(0, min(sleepiness + deltaSleep, 100));
    boredom = max(0, min(boredom + deltaBoredom, 100));
    sadness = max(0, min(sadness + deltaSadness, 100));

}

void Pet::interaction(int deltaHunger, int deltaSleep, int deltaBoredom, int deltaSadness) {
    changeStat(deltaHunger, deltaSleep, deltaBoredom, deltaSadness);
    nextHour();
	printWarnings();
}

void Pet::feed() {
    interaction(-40, -20, 0, 5);
}

void Pet::play() {
    interaction(20, 15, -40, -40);
}

void Pet::sleep() {
    interaction(20, -50, 0, 0);
}

void Pet::nextHour() {
    changeStat(2, 2, 2, 2);
	hoursAged = hoursAged + 1;
}

void Pet::printWarning(string stat, int amount) {
    if (amount > 40) {
        cout << "Warning! " + name + " is " + stat + " with " + to_string(amount) + "/100" << endl;
    }
}

void Pet::printWarnings() {
    printWarning("hungry", hunger);
    printWarning("sad", sadness);
    printWarning("bored", boredom);
    printWarning("sleepy", sleepiness);
	if (hunger > 40 || sadness > 40 || boredom > 40 || sleepiness > 40) {
		GameManager::pause();
	}
}

void Pet::load(string _name, int _hoursAged, string _trait, int _hunger, int _sleepiness, int _boredom, int _sadness, string _type) {
    name = _name;
    hoursAged = _hoursAged;
    trait = _trait;
    hunger = _hunger;
    sleepiness = _sleepiness;
    boredom = _boredom;
    sadness = _sadness;
    type = _type;
}


